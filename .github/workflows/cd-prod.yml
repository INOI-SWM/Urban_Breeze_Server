name: Deploy prod to AWS EC2

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Timezone to Asia/Seoul
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Seoul"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Setup application.yml (PROD)
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > src/main/resources/application.yml

      - name: Build Spring Project
        run: ./gradlew clean bootJar

      - name: Get current datetime
        id: datetime
        run: echo "datetime=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build & Push (prod)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:prod-${{ steps.datetime.outputs.datetime }}
          build-args: JAR_FILE=build/libs/app.jar

      - name: Upload docker-compose.prod.yml
        uses: actions/upload-artifact@v4
        with:
          name: compose-yml
          path: ./docker-compose.prod.yml

      - name: Upload monitoring stack files
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-bundle
          path: |
            ./docker-compose.monitoring.yml
            ./monitoring/

    outputs:
      BUILD_VERSION: ${{ steps.datetime.outputs.datetime }}

  deploy:
    runs-on: [self-hosted, app-prod]      # ← prod 전용 러너 라벨
    needs: build

    steps:
      - name: Download docker-compose.prod.yml
        uses: actions/download-artifact@v4
        with:
          name: compose-yml
          path: .

      - name: Download monitoring stack files
        uses: actions/download-artifact@v4
        with:
          name: monitoring-bundle
          path: .

      - name: Write .env (prod)
        run: |
          cat <<EOF > .env
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DOCKER_REPO=${{ secrets.DOCKER_REPO }}
          DOCKER_IMAGE_VERSION=${{ needs.build.outputs.BUILD_VERSION }}
          EOF

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2
        run: |
          echo "AWS credentials configured"

      - name: Backup logs before restart
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q '^urban-breeze-prod$'; then
            # Docker 볼륨에서 로그 백업
            if docker volume ls | grep -q "urbanbreeze-logs"; then
              date=$(date +%Y%m%d_%H%M%S)
              
              # 임시 컨테이너로 볼륨 내용 백업
              docker run --rm -v urbanbreeze-logs:/logs -v $(pwd):/backup alpine tar -czf /backup/urbanbreeze_logs_${date}.tar.gz -C /logs .
              
              # S3에 업로드
              echo "Uploading logs to S3..."
              if aws s3 cp "urbanbreeze_logs_${date}.tar.gz" "s3://urbanbreeze-logs/prod/logs/"; then
                echo "Logs backed up to S3 successfully"
                
                # 로컬 압축 파일 삭제
                rm "urbanbreeze_logs_${date}.tar.gz"
                echo "Local backup file removed"
              else
                echo "Failed to upload logs to S3"
                exit 1
              fi
            fi
          fi

      - name: Stop OLD prod app container
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q '^urban-breeze-prod$'; then
            sudo docker stop urban-breeze-prod
            sudo docker rm urban-breeze-prod
          fi

      - name: Prune Docker Images
        run: sudo docker image prune -a -f

      - name: Run New Containers (prod)
        run: sudo docker compose -f docker-compose.prod.yml up -d

      - name: Run Monitoring Stack (prod)
        run: sudo docker compose -f docker-compose.monitoring.yml up -d

      - name: Setup Log Backup Cron Job
        run: |
          # 백업 스크립트 업로드
          sudo mkdir -p /home/ubuntu/scripts
          sudo cp scripts/log-backup.sh /home/ubuntu/scripts/
          sudo chmod +x /home/ubuntu/scripts/log-backup.sh
          
          # Cron Job 설정
          sudo bash scripts/setup-cron.sh
          
          echo "Log backup cron job configured successfully"
