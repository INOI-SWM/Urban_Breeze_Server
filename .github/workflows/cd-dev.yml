name: Deploy dev to AWS EC2

on:
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Timezone to Asia/Seoul
        uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Asia/Seoul"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Setup application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_DEV_YML }}" > src/main/resources/application.yml

      - name: Build Spring Project
        run: ./gradlew clean bootJar

      - name: Get current datetime
        id: datetime
        run: echo "datetime=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:dev-${{ steps.datetime.outputs.datetime }}
          build-args: JAR_FILE=build/libs/app.jar

      - name: Upload docker-compose.dev.yml
        uses: actions/upload-artifact@v4
        with:
          name: compose-yml
          path: ./docker-compose.dev.yml

    outputs:
      BUILD_VERSION: ${{ steps.datetime.outputs.datetime }}

  deploy:
    runs-on: [self-hosted, app-dev]
    needs: build

    steps:
      - name: Download docker-compose.dev.yml
        uses: actions/download-artifact@v4
        with:
          name: compose-yml
          path: .

      - name: Write .env file
        run: |
          cat <<EOF > .env
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DOCKER_REPO=${{ secrets.DOCKER_REPO }}
          DOCKER_IMAGE_VERSION=${{ needs.build.outputs.BUILD_VERSION }}

          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD 
          
          ORS_API_KEY=${{ secrets.ORS_API_KEY }}
          EOF

      - name: Stop app container only
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q '^riding-mate-dev$'; then
            sudo docker stop riding-mate-dev
            sudo docker rm riding-mate-dev
          fi

      - name: Prune Docker Images
        run: sudo docker image prune -a -f

      - name: Run New Containers
        run: sudo docker compose -f docker-compose.dev.yml up -d